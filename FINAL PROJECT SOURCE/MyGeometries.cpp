//
//  MyGeometries.cpp - Fall 2022
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include <GL/glew.h> 
#include <GLFW/glfw3.h>

#include "LinearR3.h"       // Adjust path as needed.
#include "LinearR4.h"       // Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"
#include "GlGeomTorus.h"

// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 13;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
    "snorlax_body.bmp", // 0
    "snorlax_top.bmp",
    "road.bmp",
    "concrete_base.bmp",
    "flowers.bmp",
    "wall_temp.bmp",    // 5
    "fence.bmp",
    "gate.bmp",
    "ceramics.bmp",
    "roof_ent.bmp",
    "ground.bmp",        //10
    "green_tile.bmp",
    "dark_oak.bmp"
};

// *******************************
// For spheres and a cylinder and a torus (Torus is currently not used.)
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
GlGeomTorus texTorus(4, 4, 0.75);


// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 9;
const int iFloor = 0;
const int iFloor1 = 1;
const int iFillGround = 2;            // RESERVED FOR USE BY 155A PROJECT
const int iLawn1 = 3;
const int iLawn2 = 4;
const int iLawn11 = 5;
const int iLawn21 = 6;
const int map =7;
const int mapFrame = 8;

const int spawnX = 0;
const int spawnY = 0;
const int spawnZ = 20;
const double snorlaxBodyHeight = 1.2;
const double snorlaxTopHeight = 0.7;

unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE FOR DIFFERENT GEOMETRIES
    materialUnderTexture.EmissiveColor.Set(0.1, 0.1, 0.1);
    materialUnderTexture.SpecularColor.Set(0.2, 0.2, 0.2);
    materialUnderTexture.AmbientColor.Set(0.2, 0.2, 0.2);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

    // ***********************************************
    // Load texture maps
    // ***********************************************
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
#if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);


}

// **********************
// This sets up geometries needed for 
//   (a) the floor (ground plane)
//   (b) the back wall
//   (c) the circular mesh
//   (d) two spheres
//   (e) one cylinder
//  It is called only once.
//  YOU NEED TO CHANGE THIS ONCE YOU ADD THE TEXTURE COORDINATES TO THE CIRCULAR SURFACE.
// **********************
void MySetupSurfaces() {

    texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texTorus.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

void MyRemeshGeometries()
{
    // IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
    // YOU DO NOT NEED TO CHANGE THIS FOR PROJECT #6.

    texSphere.Remesh(meshRes, meshRes);
    texTorus.Remesh(meshRes, meshRes);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

// **********************************************
// MODIFY THIS ROUTINE TO RENDER THE FLOOR, THE BACK WALL,
//    AND THE SPHERES AND THE CYLINDER. -- WITH TEXTURES
// **********************************************

void MyRenderGeometries() {

    float matEntries[16];       // Temporary storage for floats

    renderTempleLawn();
    // Render the Floor - using a procedural texture map
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[map]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[mapFrame]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    //glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose Earth image texture
    //glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFillGround]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFloor1 ]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iLawn1]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iLawn11]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iLawn2]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iLawn21]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // ******
    // Render the wall - using a procedural texture map
    // ******
    renderTemple();
    renderGateWall();
    renderBuilding1();
    renderBuilding2();

    if (renderFloorOnly) {
        return;
    }

    renderChar();

    // **************
    // Render the circular surface
    selectShaderProgram(shaderProgramBitmap);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);
    glUniform1i(applyTextureLocation, true);
    //SamsRenderCircularSurf();
    glUniform1i(applyTextureLocation, false);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

void renderChar() {

    float matEntries[16];       // Temporary storage for floats
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(spawnX, spawnY + snorlaxBodyHeight, spawnZ);
    matDemo.Mult_glScale(snorlaxBodyHeight, snorlaxBodyHeight, snorlaxBodyHeight);
    matDemo.Mult_glRotate(snorlaxPOV, 0, 1, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                              // Render the sphere
    texSphere.Remesh(meshRes, meshRes);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(spawnX, spawnY + snorlaxBodyHeight*2 + snorlaxTopHeight*0.6f, spawnZ);
    matDemo.Mult_glScale(snorlaxTopHeight, snorlaxTopHeight, snorlaxTopHeight);
    matDemo.Mult_glRotate(snorlaxPOV, 0, 1, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();
    texSphere.Remesh(meshRes, meshRes);
}

void renderTempleLawn() {

    float mapVerts[] = {
        // Position              // Normal                  // Texture coordinates
        8.0f, 12.0f, 15.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Back left
        16.0f, 12.0f, 15.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Back right
        16.35f, 9.0f,  15.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Front right
        8.2f, 9.0f,  15.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int mapElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[map]);
    glBindVertexArray(myVAO[map]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(mapVerts), mapVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[map]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(mapElts), mapElts, GL_STATIC_DRAW);

    float mapFrameVerts[] = {
        // Position              // Normal                  // Texture coordinates
        7.8f, 12.2f, 14.8f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Back left
        16.4f, 12.2f, 14.8f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Back right
        16.75f, 8.8f,  14.8f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Front right
        8.0f, 8.8f,  14.8f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Front left
    };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[mapFrame]);
    glBindVertexArray(myVAO[mapFrame]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(mapFrameVerts), mapFrameVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[mapFrame]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(mapElts), mapElts, GL_STATIC_DRAW);


    float groundVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -200.0f - snorlaxPOSx, -0.01f, -100.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         200.0f - snorlaxPOSx, -0.01f, -100.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
         200.0f - snorlaxPOSx, -0.01f,  100.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        -200.0f - snorlaxPOSx, -0.01f,  100.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int floorElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFillGround]);
    glBindVertexArray(myVAO[iFillGround]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(groundVerts), groundVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFillGround]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -2.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         2.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
         2.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        -2.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };

    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    float floorVerts1[] = {
        // Position              // Normal                  // Texture coordinates
        -2.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Back left
         2.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Back right
         2.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Front right
        -2.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Front left
    };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor1]);
    glBindVertexArray(myVAO[iFloor1]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts1), floorVerts1, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    float lawnVerts1[] = {
        // Position              // Normal                  // Texture coordinates
        -13.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
        -2.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
        -2.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        -13.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int lawnElts1[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iLawn1]);
    glBindVertexArray(myVAO[iLawn1]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(lawnVerts1), lawnVerts1, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iLawn1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lawnElts1), lawnElts1, GL_STATIC_DRAW);

    float lawnVerts11[] = {
        // Position              // Normal                  // Texture coordinates
        -13.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
        -2.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
        -2.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        -13.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iLawn11]);
    glBindVertexArray(myVAO[iLawn11]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(lawnVerts11), lawnVerts11, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iLawn11]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lawnElts1), lawnElts1, GL_STATIC_DRAW);

    float lawnVerts2[] = {
        // Position              // Normal                  // Texture coordinates
        2.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
        13.0f - snorlaxPOSx, 0.0f, -6.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
        13.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        2.0f - snorlaxPOSx, 0.0f,  12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int lawnElts2[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iLawn2]);
    glBindVertexArray(myVAO[iLawn2]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(lawnVerts2), lawnVerts2, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iLawn2]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lawnElts2), lawnElts2, GL_STATIC_DRAW);


    float lawnVerts21[] = {
        // Position              // Normal                  // Texture coordinates
        2.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
        13.0f - snorlaxPOSx, 0.0f, 12.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 1.0f,         // Back right
        13.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.5f, 0.0f,         // Front right
        2.0f - snorlaxPOSx, 0.0f,  30.0f - snorlaxPOSy,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iLawn21]);
    glBindVertexArray(myVAO[iLawn21]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(lawnVerts21), lawnVerts21, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);    // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);                                 // Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));    // Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                  // Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);                                   // Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iLawn21]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lawnElts2), lawnElts2, GL_STATIC_DRAW);

}

void renderBuilding1() {

    float matEntries[16];       // Temporary storage for floats

    // bottom base
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-20 - snorlaxPOSx, 3.0, 5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(10, 3,10);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // brown edge up
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-20 - snorlaxPOSx, -1, 5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(10.5, 2, 10.5);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-20 - snorlaxPOSx, -1.5, 5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(11, 2, 11);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-20 - snorlaxPOSx, 6.01, 5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(11, 0.2, 11);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // triangle top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-17 - snorlaxPOSx, 3.5, 5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI /2.0f, 0, 0, 1);
    matDemo.Mult_glScale(7, 2, 7);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // roof
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-16 - snorlaxPOSx, 9.5, 6 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-18 - snorlaxPOSx, 9.5, 6 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);


    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-16 - snorlaxPOSx, 7.7, 8.0 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 5.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-18 - snorlaxPOSx, 7.7, 8.0 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 5.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-16 - snorlaxPOSx, 6.5, 10 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 6.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-18 - snorlaxPOSx, 6.5, 10 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 6.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.3, 2);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // stick out room
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.8 - snorlaxPOSx, 3.0, 11 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // brown edge
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.8 - snorlaxPOSx, -1.0, 11 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6.5, 2, 6.5);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.8 - snorlaxPOSx, -1.5, 11 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(7.0, 2, 7.0);
    matDemo.DumpByColumns(matEntries);                 // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // top edge
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.8 - snorlaxPOSx, 6, 11 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(7.0, 0.2, 7.0);
    matDemo.DumpByColumns(matEntries);                 // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // 2nd floor
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.8 - snorlaxPOSx, 9.0, 2 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-22.801 - snorlaxPOSx, 9.0, 7 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);
}


void renderBuilding2() {

    float matEntries[16];       // Temporary storage for floats

    // bottom base
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(20 - snorlaxPOSx, 3.0, 10 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(20 - snorlaxPOSx, 3.0, 19 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(20 - snorlaxPOSx, 3.0, 28 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(6, 3, 6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);
}

void renderTemple() {

    float matEntries[16];       // Temporary storage for floats

    // bottom base
    LinearMapR4 matDemo = viewMatrix; 
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, 1.5, -13 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI/4.0f, 0, 1, 0);
    matDemo.Mult_glScale(11, 1.5, 11);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();       
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    // edge
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, 2.7, -13 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(11.7, 0.35, 11.7);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    glUniform1i(applyTextureLocation, false);

    // first floor
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, 4.5, -13 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(7, 3, 7);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, 9.5, -13 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    glUniform1i(applyTextureLocation, false);

    // stairs
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, 0.2, -5 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -0.2, -4.4 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -0.6, -3.8 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -1.0, -3.2 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -1.4, -2.6 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -1.8, -2.0 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -2.2, -1.4 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0 - snorlaxPOSx, -2.6, -0.8 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(4, 0.3, 4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);

    renderFence();
    renderTempleWall();
}

void renderTempleWall() {
    float matEntries[16];       // Temporary storage for floats

    texCylinder.Remesh(4, 4, 4);
    LinearMapR4 fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-5 - snorlaxPOSx, 5.0, -8 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.25, 2.0, 0.25);
    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 10; i++) {
            if ((i < 4 || i >= 6 && j == 0) || j == 1) {
                fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
                glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
                glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
                glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                texCylinder.RenderSide();
                texCylinder.RenderTop();
                texCylinder.RenderBase();
            }
            fenceMat.Mult_glTranslate(4.43, 0, 0);
        }
        fenceMat = viewMatrix;
        fenceMat.Mult_glTranslate(0 - snorlaxPOSx - 7, 3.5, -19 - snorlaxPOSy);
        fenceMat.Mult_glScale(0.15, 0.5, 0.15);
    }

    // red criss cross vertical
    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-1.15 - snorlaxPOSx, 4.0, -8 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.15, 1.5, 0.15);
        for (int i = 0; i < 7; i++) {
                fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
                glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
                glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose Earth image texture
                glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                texCylinder.RenderSide();
                texCylinder.RenderTop();
                texCylinder.RenderBase();
            fenceMat.Mult_glTranslate(2.5, 0, 0);
        }

        // red criss cross horizontal
        fenceMat = viewMatrix;
        fenceMat.Mult_glTranslate(-snorlaxPOSx, 5.0, -8 - snorlaxPOSy);
        fenceMat.Mult_glRotate(PI / 2.0f, 0, 0, 1);
        fenceMat.Mult_glScale(0.15, 1.2, 0.15);

        for (int i = 0; i < 10; i++) {
            fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
            glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
            glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose Earth image texture
            glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
            texCylinder.RenderSide();
            texCylinder.RenderTop();
            texCylinder.RenderBase();
            fenceMat.Mult_glTranslate(-1.5, 0, 0);
        }

    // wall frame
    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-snorlaxPOSx - 1.25, 4.0, -7.7 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.35, 1.5, 0.35);
    fenceMat.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();

    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-snorlaxPOSx + 1.25, 4.0, -7.7 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.35, 1.5, 0.35);
    fenceMat.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();

    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-snorlaxPOSx, 5.4, -7.69 - snorlaxPOSy);
    fenceMat.Mult_glRotate(PI / 2.0f, 0, 0, 1);
    fenceMat.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    fenceMat.Mult_glScale(0.35, 2.2, 0.35);
    fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();

    // floor 1 roof
    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-6-snorlaxPOSx, 7.5, -7.69 - snorlaxPOSy);
    fenceMat.Mult_glRotate(PI / 6.0f, 1, 0, 0);
    fenceMat.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    fenceMat.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 5; i++) {
        fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[11]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        fenceMat.Mult_glTranslate(1.0, 0, -1.0);
    }

    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-3 - snorlaxPOSx, 12.5, -9.5- snorlaxPOSy);
    fenceMat.Mult_glRotate(PI / 6.0f, 1, 0, 0);
    fenceMat.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    fenceMat.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 3; i++) {
        fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[11]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        fenceMat.Mult_glTranslate(1.0, 0, -1.0);
    }

}

void renderFence() {

    float matEntries[16];       // Temporary storage for floats

    LinearMapR4 fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(0 - snorlaxPOSx - 7, 3.5, -6 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.15, 0.5, 0.15);
    texCylinder.Remesh(10, 10, 10);
    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 11; i++) {
            if ((i < 4 || i > 6 && j == 0) || j == 1) {
                fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
                glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
                glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
                glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                texCylinder.RenderSide();
                texCylinder.RenderTop();
                texCylinder.RenderBase();
            }
            fenceMat.Mult_glTranslate(9.43, 0, 0);
        }
        fenceMat = viewMatrix;
        fenceMat.Mult_glTranslate(0 - snorlaxPOSx - 7, 3.5, -19 - snorlaxPOSy);
        fenceMat.Mult_glScale(0.15, 0.5, 0.15);
    }

    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(0 - snorlaxPOSx - 7, 3.5, -6 - snorlaxPOSy);
    fenceMat.Mult_glScale(0.15, 0.5, 0.15);
    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 9; i++) {
            fenceMat.Mult_glTranslate(0, 0, -9.43);
            fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
            glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
            glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose Earth image texture
            glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
            texCylinder.RenderSide();
            texCylinder.RenderTop();
            texCylinder.RenderBase();
        }
        fenceMat = viewMatrix;
        fenceMat.Mult_glTranslate(7.2 - snorlaxPOSx, 3.5, -6 - snorlaxPOSy);
        fenceMat.Mult_glScale(0.15, 0.5, 0.15);
    }

    // connecting
    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate( -snorlaxPOSx - 5.0, 3.7, -6 - snorlaxPOSy);
    //fenceMat.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    fenceMat.Mult_glRotate(PI / 2.0f, 0, 0, 1);
    fenceMat.Mult_glScale(0.08, 2.1, 0.08);
    fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);   // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();

    fenceMat = viewMatrix;
    fenceMat.Mult_glTranslate(-snorlaxPOSx + 5.0, 3.7, -6 - snorlaxPOSy);
    fenceMat.Mult_glRotate(PI / 2.0f, 0, 0, 1);
    fenceMat.Mult_glScale(0.08, 2.1, 0.08);
    fenceMat.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);   // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();
    texCylinder.RenderTop();
    texCylinder.RenderBase();
    glUniform1i(applyTextureLocation, false);

    texCylinder.Remesh(4, 4, 4);
}

void renderGateWall() {

    float matEntries[16];       // Temporary storage for floats

   // front row
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(7.5 - snorlaxPOSx, 2.5, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(3, 0.5, 3);
    for (int i = 0; i < 10; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate( 1.0,0,-1.0);
    }

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-7.5 - snorlaxPOSx, 2.5, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(3, 0.5, 3);
    for (int i = 0; i < 10; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(-1.0, 0, +1.0);
    }

    // tilted roof
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-50 - snorlaxPOSx, 5.2, 41 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 37; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-50 - snorlaxPOSx, 5.2, 39 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 37; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }

    // back row
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-45 - snorlaxPOSx, 2.5, -40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 2.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(3, 0.5, 3);
    for (int i = 0; i < 23; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }


    // tilted roof
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-50 - snorlaxPOSx, 5.2, -39 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 37; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-50 - snorlaxPOSx, 5.2, -41 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 4.0f, 1, 0, 0);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 37; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    // right
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(50 - snorlaxPOSx, 2.5, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 2.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    //matDemo.Mult_glRotate(-PI / 2.0f, 0, 0, 1);
    matDemo.Mult_glScale(3, 0.5, 3);
    for (int i = 0; i < 20; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }

    // tilted roof
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(51 - snorlaxPOSx, 5.2, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 30; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(49 - snorlaxPOSx, 5.2, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 30; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }

    // left
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-47 - snorlaxPOSx, 2.5, 38 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 2.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    //matDemo.Mult_glRotate(-PI / 2.0f, 0, 0, 1);
    matDemo.Mult_glScale(3, 0.5, 3);
    for (int i = 0; i < 20; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }

    // tilted roof
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-46 - snorlaxPOSx, 5.2, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(-PI / 4.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 30; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-48 - snorlaxPOSx, 5.2, 40 - snorlaxPOSy);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 0, 1);
    matDemo.Mult_glRotate(PI / 4.0f, 0, 1, 0);
    matDemo.Mult_glScale(2, 0.2, 2);
    for (int i = 0; i < 30; i++) {
        matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[9]);     // Choose Earth image texture
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        texCylinder.RenderSide();
        texCylinder.RenderTop();
        texCylinder.RenderBase();
        matDemo.Mult_glTranslate(1.0, 0, -1.0);
    }
    texCylinder.Remesh(4, 4, 4);
    glUniform1i(applyTextureLocation, false);
}